name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install Dependecies
        run: npm ci
      #   - name: Lint code
      #     run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # this lets you acces some values outside this job
    outputs:
      script-file: ${{steps.publish.outputs.script-file}}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install Dependecies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        # we will be able to access data from this step via this id
        id: publish
        # This is linux command to get js file name and print it
        # run: find  dist/assets/*.js -type f -execdir echo '{}' ';
        # here we are getting the name of file in step output, this can be different from job output. this can be anything,i.e after
        #  = we can have anything here {} is placehilder which contains fileName
        # >> GITHUB_OUTPUT target a special file, a specuial created by github in envirenment in which your
        # job runs, where output key-value pair is return to. path of that file is in GITHUB_OUTPUT
        # this value can be accessed at job level via contsext - steps.[StepIdentifier.outputs].scriptFile
        run: find  dist/assets/*.js -type f -execdir echo 'script-file={}' >> GITHUB_OUTPUT ';'
        # older syntax for setting output value at steps level
        # run: find  dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # name is useful for retrieving these artifacts. especially if you want to do that automatically in susbsequent jobs
          # this describes the paths where files to be stored should be found. you can also exclude some files
          # to show how multiple files are stored under one name and how they are accessed, we will be using multiple files
          name: dist-files
          # here we can mention multiple files also, which can be then donaloaded under same. we can also mention files which should
          # not be included. we can also emntion list of file using | sign
          path: dist
        #   path: |
        #     dist
        #     package.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        # This is the file that gets the artifacts uploaded previoisly
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: Output contents
        run: ls
      # here we print the ouput of another job via needs context. you can get data about othet jobs via jobs
      # context object but for output, needs is better suited. becaus needs context contains data of all
      # jobs that are defined as dependency of current job
      - name: Output filename
        run: echo "${{needs.build.outputs.script-file}}"
      - name: Deploy
        run: echo "Deploying"
